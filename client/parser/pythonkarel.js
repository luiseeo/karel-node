/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pythonkarel = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[15,20,21,22,23,24,25,36,41,44],$V1=[2,5],$V2=[1,7],$V3=[11,15,20,21,22,23,24,25,36,41,44],$V4=[1,20],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,24],$Vc=[1,27],$Vd=[1,26],$Ve=[9,31],$Vf=[9,15,20,21,22,23,24,25,31,36,39,41,44],$Vg=[1,43],$Vh=[1,69],$Vi=[1,56],$Vj=[1,53],$Vk=[1,57],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[16,57,60,62,63,64,65,66,67,68,69,70,71,72,73],$Vx=[1,83],$Vy=[1,82],$Vz=[1,84],$VA=[1,85],$VB=[13,18],$VC=[13,18,52],$VD=[13,18,52,55],$VE=[15,20,21,22,23,24,25,30,36,41,44];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"primera":3,"START":4,"segunda":5,"metodos":6,"programa":7,"estatutos":8,"EOF":9,"metodo":10,"DEF":11,"firma":12,":":13,"bloque":14,"ID":15,"(":16,"parametro":17,")":18,"estatuto":19,"TURNOFF":20,"TURNLEFT":21,"MOVE":22,"PICKBEEPER":23,"PUTBEEPER":24,"RETURN":25,"llamada":26,"ifestatuto":27,"whileloop":28,"for":29,"INDENT":30,"DEDENT":31,"estatutoobloque":32,"argumento":33,"expresion":34,"ifthen":35,"IF":36,"termino":37,"elset":38,"ELSE":39,"whilet":40,"WHILE":41,"whiletermino":42,"forexpr":43,"FOR":44,"IN":45,"RANGE":46,"DECIMAL":47,"PRED":48,"SUCC":49,"clausulayaux":50,"clausulay":51,"OR":52,"clausulanoaux":53,"clausulano":54,"AND":55,"not":56,"NOT":57,"clausulaAtomica":58,"parentesis":59,"ISZERO":60,"funcionbooleana":61,"FRONTISCLEAR":62,"FRONTISBLOCKED":63,"LEFTISCLEAR":64,"LEFTISBLOCKED":65,"RIGHTISCLEAR":66,"RIGHTISBLOCKED":67,"NEXTOABEEPER":68,"BEEPERSINBAG":69,"FACINGNORTH":70,"FACINGSOUTH":71,"FACINGEAST":72,"FACINGWEST":73,"$accept":0,"$end":1},
terminals_: {2:"error",4:"START",9:"EOF",11:"DEF",13:":",15:"ID",16:"(",18:")",20:"TURNOFF",21:"TURNLEFT",22:"MOVE",23:"PICKBEEPER",24:"PUTBEEPER",25:"RETURN",30:"INDENT",31:"DEDENT",36:"IF",39:"ELSE",41:"WHILE",44:"FOR",45:"IN",46:"RANGE",47:"DECIMAL",48:"PRED",49:"SUCC",52:"OR",55:"AND",57:"NOT",60:"ISZERO",62:"FRONTISCLEAR",63:"FRONTISBLOCKED",64:"LEFTISCLEAR",65:"LEFTISBLOCKED",66:"RIGHTISCLEAR",67:"RIGHTISBLOCKED",68:"NEXTOABEEPER",69:"BEEPERSINBAG",70:"FACINGNORTH",71:"FACINGSOUTH",72:"FACINGEAST",73:"FACINGWEST"},
productions_: [0,[3,1],[5,1],[7,4],[6,2],[6,0],[10,4],[12,4],[17,1],[17,0],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,1],[19,1],[19,1],[8,2],[8,1],[14,3],[32,1],[32,1],[26,4],[33,1],[33,0],[35,3],[38,2],[27,2],[27,4],[40,1],[42,3],[28,2],[43,8],[29,2],[34,1],[34,1],[34,4],[34,4],[50,2],[37,1],[37,2],[53,2],[51,1],[51,2],[56,1],[54,1],[54,2],[59,1],[58,4],[58,1],[58,3],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    POperandos = new Array();
    POperadores = new Array();
    PSaltos = new Array();
    llamadas = new Array();
    dirproc = programaCompilado.dirproc;
    cuadruplos = programaCompilado.cuadruplos;
    constantes = programaCompilado.constantes;
    errores = programaCompilado.errores;
    commands = programaCompilado.commands;
    //Agregar cuadruplo para ir al procedimiento principal "program"
    cuadruplos.push([commands["ERA"],"","",""]);
    cuadruplos.push([commands["GOTO"],"","",""]);

break;
case 2:

    //agregar intrucciones sueltas como metodo "program", el punto de entrada
    procActual = "program";
    dirproc[procActual]={parametro:undefined,cuadruplo: cuadruplos.length, memoria:{enteros:100000,booleanos:3000000}};

break;
case 3:

    //Generar el END del programa principal
    //cuadruplos.push([commands["END"],"","",""]);
    cuadruplos[0][1]=dirproc["program"].memoria.enteros;
    cuadruplos[0][2]=dirproc["program"].memoria.booleanos;
    cuadruplos[1][3]=dirproc["program"].cuadruplo;
    //Procedimiento para revisar la semantica y soportar llamadas entre procedimientos
    for (i = 0; i < llamadas.length; i++) {
        llamada = llamadas[i];
        //checar que el procedimiento exista
        if (dirproc[llamada.id] === undefined) {
            errores.push({message:"error, el procedimiento '"+llamada.id+"' no existe",lineNo:llamada.linea});
            break;
        }
        //checar que este procedimiento no necesite parametro
        if (dirproc[llamada.id].parametro !== undefined && llamada.idvar === undefined) {
            errores.push({ message:"El procedimiento '" + llamada.id + "' lleva parametro", lineNo:llamada.linea });
            break;
        }
        //checar que este procedimiento necesite parametro
        else if (dirproc[llamada.id].parametro === undefined && llamada.idvar !== undefined) {
            errores.push({ message:"El procedimiento '" + llamada.id + "' no lleva parametro", lineNo:llamada.linea });
            break;
        }
        else {
            cuadruplos[llamada.cuadruplo][1] = dirproc[llamada.id].cuadruplo;
            if(llamada.idvar !== undefined)
                cuadruplos[llamada.cuadruplo][2] = dirproc[llamada.id].parametro.dir;
            cuadruplos[llamada.cuadruplo - 1][1] = dirproc[llamada.id].memoria.enteros;
            cuadruplos[llamada.cuadruplo - 1][2] = dirproc[llamada.id].memoria.booleanos;
        }
    }

break;
case 6:

    cuadruplos.push([commands["RETURN"],"","",""]);

break;
case 7:

    procActual = $$[$0-3];
    // Verificar que su id sea correcto
    if (dirproc[procActual] !== undefined) {
        errores.push({ message:"El procedimiento '" + procActual + "' ya fue definido.", lineNo:llamada.linea });
    }
        
    //agregar procedimiento al directorio de procedimientos
    if ($$[$0-1] === undefined) {
        dirproc[procActual] = { parametro: undefined, cuadruplo: programaCompilado.cuadruplos.length, memoria: {enteros: 100000, booleanos: 3000000} };
    }
    else {
        dirproc[procActual] = {parametro: {id: $$[$0-1], dir: 100000},cuadruplo: programaCompilado.cuadruplos.length, memoria: {enteros: 100001,booleanos: 3000000}};
    }

break;
case 8:
 this.$ = $$[$0];
break;
case 9:
 this.$ = undefined;
break;
case 10:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["END"],"","",""]);

break;
case 11:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["GIRA_IZQ"],"","",""]);

break;
case 12:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["AVANZA"],"","",""]);

break;
case 13:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["COGE_ZUM"],"","",""]);

break;
case 14:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["DEJA_ZUM"],"","",""]);

break;
case 15:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["RETURN"],"","",""]);

break;
case 25:
  
    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["ERA"],$$[$0-3],"",""]);
    llamadas.push({id:$$[$0-3],idvar:$$[$0-1],linea:yylineno+1,cuadruplo:cuadruplos.length});
    cuadruplos.push([commands["GOSUB"],"","",""]);

break;
case 26:

    cuadruplos.push([commands["PARAM"],POperandos.pop(),"",""]);

break;
case 28:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    PSaltos.push(cuadruplos.length);
    cuadruplos.push([commands["GOTOF"],POperandos.pop(),"",""]);

break;
case 29:

    cuadruplos.push([commands["GOTO"],"","",""]);
    gotof = PSaltos.pop();
    cuadruplos[gotof][3]= cuadruplos.length;
    PSaltos.push(cuadruplos.length-1);

break;
case 30:

    gotof = PSaltos.pop();
    cuadruplos[gotof][3] = cuadruplos.length;

break;
case 31:

    salto = PSaltos.pop();
    cuadruplos[salto][3] = cuadruplos.length;       

break;
case 32:

    PSaltos.push(cuadruplos.length);

break;
case 33:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    PSaltos.push(cuadruplos.length);
    cuadruplos.push([commands["GOTOF"],POperandos.pop(),"",""]);    

break;
case 34: case 36:

    gotof = PSaltos.pop();
    loop = PSaltos.pop();
    cuadruplos.push([commands["GOTO"],"","",loop]);
    cuadruplos[gotof][3]=cuadruplos.length;

break;
case 35:

    cuadruplos.push([commands["SUCC"],POperandos.pop(),"",dirproc[procActual].memoria.enteros++]);
    PSaltos.push(cuadruplos.length);
    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["PRED"],dirproc[procActual].memoria.enteros-1,"",dirproc[procActual].memoria.enteros-1]);
    cuadruplos.push([commands["ES_CERO"],dirproc[procActual].memoria.enteros-1,"",dirproc[procActual].memoria.booleanos++]);
    cuadruplos.push([commands["NOT"],dirproc[procActual].memoria.booleanos-1,"",dirproc[procActual].memoria.booleanos++]);
    PSaltos.push(cuadruplos.length);
    cuadruplos.push([commands["GOTOF"],dirproc[procActual].memoria.booleanos-1,"",""]);

break;
case 37:
 
    POperandos.push("#"+$$[$0]);

break;
case 38:

    if ( dirproc[procActual].parametro.id !== $$[$0])
        errores.push({message:"error, la variable '"+$$[$0]+"' no existe en ese contexto",lineNo:yylineno+1});
    else
        POperandos.push(dirproc[procActual].parametro.dir);

break;
case 39:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["PRED"],POperandos.pop() ,"",dirproc[procActual].memoria.enteros++]);
    POperandos.push(dirproc[procActual].memoria.enteros-1);

break;
case 40:

    cuadruplos.push([commands["STEP"],"","",yylineno+1]);
    cuadruplos.push([commands["SUCC"],POperandos.pop() ,"",dirproc[procActual].memoria.enteros++]);
    POperandos.push(dirproc[procActual].memoria.enteros-1);

break;
case 41:
 POperadores.push(commands["OR"]); 
break;
case 43:

    operador = POperadores.pop();
     if (operador === commands["OR"]) { 
        cuadruplos.push([operador,POperandos.pop() ,POperandos.pop(),dirproc[procActual].memoria.booleanos++]);
        POperandos.push(dirproc[procActual].memoria.booleanos-1);
    }
    else {
        POperadores.push(operador);
    }

break;
case 44:
 POperadores.push(commands["AND"]); 
break;
case 46:

    operador = POperadores.pop();
    if ( operador === commands["AND"]){ 
        cuadruplos.push([operador,POperandos.pop() ,POperandos.pop(),dirproc[procActual].memoria.booleanos++]);
        POperandos.push(dirproc[procActual].memoria.booleanos-1);
    }
    else {
        POperadores.push(operador);
    }

break;
case 47:
 POperadores.push(commands["NOT"]); 
break;
case 49:
 
    operador = POperadores.pop();
    if ( operador === commands["NOT"]) { 
        cuadruplos.push([operador,POperandos.pop() ,"",dirproc[procActual].memoria.booleanos++]);
        POperandos.push(dirproc[procActual].memoria.booleanos-1);
    }
    else {
        POperadores.push(operador);
    }

break;
case 50:
 POperadores.push('(');/*Poner fondo falso '('*/ 
break;
case 51:

    cuadruplos.push([commands["ES_CERO"],POperandos.pop() ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 53:
  POperadores.pop(); /*Quitar fondo falso '('*/
break;
case 54:

    cuadruplos.push([commands["FRENTE_LIB"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 55:

    cuadruplos.push([commands["FRENTE_BLO"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 56:

    cuadruplos.push([commands["IZQ_LIB"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 57:

    cuadruplos.push([commands["IZQ_BLO"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 58:

    cuadruplos.push([commands["DER_LIB"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 59:

    cuadruplos.push([commands["DER_BLO"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 60:

    cuadruplos.push([commands["JUNTO_ZUM"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 61:

    cuadruplos.push([commands["ZUM_MOCHILA"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 62:

    cuadruplos.push([commands["NORTE"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 63:

    cuadruplos.push([commands["SUR"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 64:

    cuadruplos.push([commands["ESTE"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
case 65:

    cuadruplos.push([commands["OESTE"],"" ,"",dirproc[procActual].memoria.booleanos++]);
    POperandos.push(dirproc[procActual].memoria.booleanos-1);

break;
}
},
table: [{3:2,4:[1,3],7:1},{1:[3]},o($V0,$V1,{5:4,6:5,10:6,11:$V2}),o($V3,[2,1]),{8:8,15:$V4,19:9,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:16,27:17,28:18,29:19,35:21,36:$Vb,40:25,41:$Vc,42:22,43:23,44:$Vd},o($V0,[2,2]),o($V0,$V1,{10:6,6:28,11:$V2}),{12:29,15:[1,30]},{9:[1,31]},o($Ve,[2,21],{19:9,26:16,27:17,28:18,29:19,35:21,42:22,43:23,40:25,8:32,15:$V4,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,36:$Vb,41:$Vc,44:$Vd}),{16:[1,33]},{16:[1,34]},{16:[1,35]},{16:[1,36]},{16:[1,37]},{16:[1,38]},o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),{16:[1,39]},{14:42,15:$V4,19:41,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:16,27:17,28:18,29:19,30:$Vg,32:40,35:21,36:$Vb,40:25,41:$Vc,42:22,43:23,44:$Vd},{14:42,15:$V4,19:41,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:16,27:17,28:18,29:19,30:$Vg,32:44,35:21,36:$Vb,40:25,41:$Vc,42:22,43:23,44:$Vd},{14:42,15:$V4,19:41,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:16,27:17,28:18,29:19,30:$Vg,32:45,35:21,36:$Vb,40:25,41:$Vc,42:22,43:23,44:$Vd},{16:$Vh,37:46,50:48,51:47,53:50,54:49,56:52,57:$Vi,58:51,59:55,60:$Vj,61:54,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},{16:$Vh,37:70,50:48,51:47,53:50,54:49,56:52,57:$Vi,58:51,59:55,60:$Vj,61:54,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},{15:[1,71]},o($Vw,[2,32]),o($V0,[2,4]),{13:[1,72]},{16:[1,73]},{1:[2,3]},o($Ve,[2,20]),{18:[1,74]},{18:[1,75]},{18:[1,76]},{18:[1,77]},{18:[1,78]},{18:[1,79]},{15:$Vx,18:[2,27],33:80,34:81,47:$Vy,48:$Vz,49:$VA},o([9,15,20,21,22,23,24,25,31,36,41,44],[2,30],{38:86,39:[1,87]}),o($Vf,[2,23]),o($Vf,[2,24]),{8:88,15:$V4,19:9,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:16,27:17,28:18,29:19,35:21,36:$Vb,40:25,41:$Vc,42:22,43:23,44:$Vd},o($Vf,[2,34]),o($Vf,[2,36]),{13:[1,89]},o($VB,[2,42],{52:[1,90]}),{16:$Vh,37:91,50:48,51:47,53:50,54:49,56:52,57:$Vi,58:51,59:55,60:$Vj,61:54,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},o($VC,[2,45],{55:[1,92]}),{16:$Vh,51:93,53:50,54:49,56:52,57:$Vi,58:51,59:55,60:$Vj,61:54,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},o($VD,[2,48]),{16:$Vh,58:94,59:55,60:$Vj,61:54,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},{16:[1,95]},o($VD,[2,52]),{16:$Vh,37:96,50:48,51:47,53:50,54:49,56:52,57:$Vi,58:51,59:55,60:$Vj,61:54,62:$Vk,63:$Vl,64:$Vm,65:$Vn,66:$Vo,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:$Vu,73:$Vv},o([16,60,62,63,64,65,66,67,68,69,70,71,72,73],[2,47]),o($VD,[2,54]),o($VD,[2,55]),o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),o($VD,[2,63]),o($VD,[2,64]),o($VD,[2,65]),o($Vw,[2,50]),{13:[1,97]},{45:[1,98]},{14:99,30:$Vg},{15:[1,101],17:100,18:[2,9]},o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{18:[1,102]},{18:[2,26]},{18:[2,37]},{18:[2,38]},{16:[1,103]},{16:[1,104]},{14:42,15:$V4,19:41,20:$V5,21:$V6,22:$V7,23:$V8,24:$V9,25:$Va,26:16,27:17,28:18,29:19,30:$Vg,32:105,35:21,36:$Vb,40:25,41:$Vc,42:22,43:23,44:$Vd},{13:[1,106]},{31:[1,107]},o($VE,[2,28]),o($Vw,[2,41]),o($VB,[2,43]),o($Vw,[2,44]),o($VC,[2,46]),o($VD,[2,49]),{15:$Vx,34:108,47:$Vy,48:$Vz,49:$VA},{18:[1,109]},o($VE,[2,33]),{46:[1,110]},o($V3,[2,6]),{18:[1,111]},{18:[2,8]},o($Vf,[2,25]),{15:$Vx,34:112,47:$Vy,48:$Vz,49:$VA},{15:$Vx,34:113,47:$Vy,48:$Vz,49:$VA},o($Vf,[2,31]),o($VE,[2,29]),o([9,11,15,20,21,22,23,24,25,31,36,39,41,44],[2,22]),{18:[1,114]},o($VD,[2,53]),{16:[1,115]},{13:[2,7]},{18:[1,116]},{18:[1,117]},o($VD,[2,51]),{15:$Vx,34:118,47:$Vy,48:$Vz,49:$VA},{18:[2,39]},{18:[2,40]},{18:[1,119]},{13:[1,120]},o($VE,[2,35])],
defaultActions: {31:[2,3],81:[2,26],82:[2,37],83:[2,38],101:[2,8],111:[2,7],116:[2,39],117:[2,40]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var currentIndentation = 0,
    indentStack = [0];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                    currentIndentation = 0;
                                    indentStack = [0];
                                    console.log("start of file");
                                    this.unput(yy_.yytext);
                                    this.begin("normal");
                                    return 4;
                                
break;
case 1:/* ignorar comentarios */
break;
case 2:/* ignorar comentarios */
break;
case 3:return 'PROGRAM';
break;
case 4:return 11;
break;
case 5:return 20;
break;
case 6:return 21;
break;
case 7:return 22;
break;
case 8:return 23;
break;
case 9:return 24;
break;
case 10:return 25;
break;
case 11:return 48;
break;
case 12:return 49;
break;
case 13:return 60;
break;
case 14:return 36;
break;
case 15:return 39;
break;
case 16:return 41;
break;
case 17:return 44;
break;
case 18:return 45;
break;
case 19:return 46;
break;
case 20:return 62;
break;
case 21:return 63;
break;
case 22:return 64;
break;
case 23:return 65;
break;
case 24:return 66;
break;
case 25:return 67;
break;
case 26:return 68;
break;
case 27:return 69;
break;
case 28:return 70;
break;
case 29:return 71;
break;
case 30:return 72;
break;
case 31:return 73;
break;
case 32:return 47;
break;
case 33:return 52;
break;
case 34:return 55;
break;
case 35:return 57;
break;
case 36:return 15;
break;
case 37:currentIndentation += 1;
break;
case 38:currentIndentation += (currentIndentation + 4) & ~3;
break;
case 39:currentIndentation = 0;
break;
case 40:
                                    this.popState();
                                    var dedents = [];
                                    while (0 < indentStack[0]) {
                                        console.log("DEDENT");
                                        dedents.push('DEDENT');
                                        indentStack.shift();
                                    }
                                    dedents.unshift('EOF');
                                    if (dedents.length > 0) return dedents;
                                
break;
case 41:
                                    console.log("Identation ended with " + currentIndentation + " chars");
                                    this.unput(yy_.yytext);
                                    if (currentIndentation > indentStack[0]) {
                                        // We found an inner indentation
                                        indentStack.unshift(currentIndentation);
                                        console.log("INDENT");
                                        console.log(indentStack);
                                        this.popState();
                                        return 30;
                                    }
                                    var dedents = [];
                                    while (currentIndentation < indentStack[0]) {
                                        console.log("DEDENT");
                                        dedents.push('DEDENT');
                                        indentStack.shift();
                                    }
                                    if (currentIndentation !== indentStack[0]) {
                                        // Raise an error
                                        return 'INDENTERROR';
                                    }
                                    
                                    this.popState();
                                    if (dedents.length > 0) return dedents;
                                
break;
case 42:
                                    currentIndentation = 0;
                                    console.log("changing to indent state");
                                    this.begin("indent"); 
                                
break;
case 43:
                                    var dedents = [];
                                    while (0 < indentStack[0]) {
                                        console.log("DEDENT");
                                        dedents.push('DEDENT');
                                        indentStack.shift();
                                    }
                                    dedents.unshift('EOF');
                                    if (dedents.length > 0) return dedents;
                                
break;
case 44:return 13;
break;
case 45:return 16;
break;
case 46:return 18;
break;
case 47:/* ignore whitespace */
break;
case 48:return 9;
break;
case 49:return 'INVALID';
break;
}
},
rules: [/^(?:.)/,/^(?:#.*)/,/^(?:"""(.|\n)*""")/,/^(?:program\b)/,/^(?:def\b)/,/^(?:turnoff\b)/,/^(?:turnleft\b)/,/^(?:move\b)/,/^(?:pickbeeper\b)/,/^(?:putbeeper\b)/,/^(?:return\b)/,/^(?:pred\b)/,/^(?:succ\b)/,/^(?:iszero\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:range\b)/,/^(?:frontIsClear\b)/,/^(?:frontIsBlocked\b)/,/^(?:leftIsClear\b)/,/^(?:leftIsBlocked\b)/,/^(?:rightIsClear\b)/,/^(?:rightIsBlocked\b)/,/^(?:nextToABeeper\b)/,/^(?:beepersInBag\b)/,/^(?:facingNorth\b)/,/^(?:facingSouth\b)/,/^(?:facingEast\b)/,/^(?:facingWest\b)/,/^(?:([1-9][0-9]*|0))/,/^(?:or\b)/,/^(?:and\b)/,/^(?:not\b)/,/^(?:([a-zA-Z][a-zA-Z0-9'-']*))/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:$)/,/^(?:.)/,/^(?:\n)/,/^(?:\s*$)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"indent":{"rules":[37,38,39,40,41],"inclusive":false},"normal":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,42,43,44,45,46,47,48],"inclusive":false},"INITIAL":{"rules":[0,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pythonkarel;
exports.Parser = pythonkarel.Parser;
exports.parse = function () { return pythonkarel.parse.apply(pythonkarel, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}